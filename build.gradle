plugins {
    id 'maven'
    id 'java'
    id 'com.jfrog.bintray' version '1.8.0'
    id 'net.researchgate.release' version '2.7.0'
    id 'eclipse'
}


apply from: 'code-style/codestyle.gradle'

def coreFixtureVersion = "4.2.+"

dependencies {
	compile 'org.slf4j:slf4j-api:1.7.25'
	compile 'org.apache.logging.log4j:log4j-core:2.11.0'
	compile 'org.apache.logging.log4j:log4j-api:2.11.0'
	compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.0'
	compile 'io.inbot:inbot-testfixtures:1.9'
	compile 'com.google.guava:guava:23.6-jre'
	compile "org.testeditor.fixture:core-fixture:$coreFixtureVersion"
	compile 'com.google.code.gson:gson:2.8.2'
	// for JUnit5
	testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.1'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
    testCompile 'org.mockito:mockito-core:2.23.0'
}

sourceSets.main.resources.includes = [ "**/*.csv" ]

/*
 * code below copied from core-fixture
 */
repositories {
    jcenter()
}

group = 'org.testeditor.fixture'

sourceCompatibility = 1.10
targetCompatibility = 1.10

// show standard out during test to see logging output
test.testLogging.showStandardStreams = true

jar {
    manifest {
        attributes 'Implementation-Title': "${project.group}.${project.name}",
                   'Implementation-Version': project.version
    }
}

// this activates JUnit5 for testing ;0)
test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom.packaging = 'jar'
    }
}

release {
    preTagCommitMessage = '[release]'
    tagCommitMessage = '[release]'
    newVersionCommitMessage = '[release] new version'
    tagTemplate = 'v${version}'
}

// For a summary of failed tests at the end of test execution.
tasks.withType(Test) {
    // a collection to track failedTests
    ext.failedTests = []
     afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            String failedTest = "${descriptor.className}::${descriptor.name}"
            logger.debug("Adding " + failedTest + " to failedTests...")
            failedTests << [failedTest]
        }
    }
     afterSuite { suite, result ->
        if (!suite.parent) { // will match the outermost suite
            // logs each failed test
            if (!failedTests.empty) {
                logger.lifecycle("\n\n*************************************************************************************************")
                logger.lifecycle("\nFailed tests:")
                failedTests.each { failedTest ->
                    logger.lifecycle("${failedTest}")
                }
            }
            logger.lifecycle("\n*************************************************************************************************\n")
        }
    }
}


bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'Fixtures'
        name = project.name
        userOrg = 'test-editor'
        licenses = ['EPL-1.0']
        vcsUrl = "https://github.com/test-editor/${project.name}.git"
        version {
            name = project.version
            vcsTag = "v$project.version"
        }
        websiteUrl = 'http://testeditor.org'
    }
}
